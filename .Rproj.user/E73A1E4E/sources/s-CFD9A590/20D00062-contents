library(shiny)
library(tidyverse)
library(readxl)
library(readr)
#beautiful plot 
library(ggplot2)
library(ggfortify)

ui <- fluidPage(
  titlePanel("Pojet R MASTER BIG DATA IA "),
  hr(),
  sidebarLayout(
    sidebarPanel(
      fileInput('file1', 'Choisissez le fichier à télécharger',
                accept = c(
                  'text/csv',
                  'text/xlsx',
                  'text/comma-separated-values',
                  'text/tab-separated-values',
                  'text/plain',
                  '.csv',
                  '.tsv'
                )
      ),
      tags$hr(),
      checkboxInput("header", "Header", TRUE),
      tags$hr(),
      radioButtons('sep', 'Separator:',
           c(Comma=',',
             Semicolon=';',
             Tab='\t'),
           ','
      ),
      width = 3
      
    ),
    mainPanel(
      tabsetPanel(
        
        tabPanel("Data upload",  
                 tableOutput('contents')
        ) ,
        tabPanel("Valeurs Propres", 
                 verbatimTextOutput("eigenValue"),
                 verbatimTextOutput("values"),
                 verbatimTextOutput("vectors"),
                 verbatimTextOutput("proportionvariance")
        ), 
        
        tabPanel("ACP",  
                 plotOutput('acp')
        )
      )
    )
  )
)
  
server <- function(input, output) {
  
  readDataFile <- reactive({
    inFile <- input$file1
    
    if (is.null(inFile))
      return(NULL)
    
  read.csv(inFile$datapath, header = input$header)
    
    
  })

  output$contents <- renderTable({
    readDataFile()
  })

  require(FactoMineR) 
  
 
 
  eigenVal <- reactive({
    dataFile <- readDataFile()
    options(digits=3) #just so we don't get so many digits in our results
    dat<-dataFile[,-1] #removing the first variable which is gender
    p<-ncol(dat) #no of variables
    R<-cor(dat) #saving the correlation matrix
    n<-nrow(dat)
    chi2<- -((n-1)-((2*p)+5)/6 ) * log(det(R)) #this is the formula
    df<-(p*(p-1)/2)
    crit<-qchisq(.95,df) #critical value
    p<-pchisq(chi2,df,lower.tail=F) #pvalue
    e<-eigen(R)
    return(e) 
  })

  output$eigenValue <- renderPrint({
   
    cat("Vecteurs propres et valeurs propres","\n")
    str(eigenVal())
  })
  
  output$values <- renderPrint({
    cat("Matrice dont tous les elements sont null sauf ceux de la diagonale(Valeurs propres)","\n")
    L<-eigenVal()$values #placing the eigenvalues in L
    diag(L)
  })
  
  output$vectors <- renderPrint({
    cat("Matrice dont tous les elements sont null sauf ceux de la diagonale(Vecteurs propres)","\n")
    eigenVal()$vectors
  })
  output$proportionvariance <- renderPrint({
    cat("Pourcentage de variance représenté par chaque variable","\n")
    p <- sum(eigenVal()$values)
    pca1<- round((eigenVal()$values/p)*100,2)
    result <-paste(pca1, "%")
    result
  })
  
  output$acp <- renderPlot({
    #L<-diag(eigenVal()$values)
    res.pca <- PCA(readDataFile(), graph = FALSE)
    eig.val <- res.pca$eig
    plot(eig.val[1:3], main="Scree Plot",ylab="Eigenvalues",xlab="Component number")

    
    
    
    #abline(h=1, lty=2)
    #boxes_matrix <- data.matrix(cbind(readDataFile()[,1], readDataFile()[,4]))
    #dimnames(boxes_matrix) <- list(NULL, cbind("long","diag"))
    #par(pty="s") # square plotting frame
    #autoplot(prcomp(boxes_matrix), data = readDataFile())
    
  })
  
  }
  
  shinyApp(ui, server)

